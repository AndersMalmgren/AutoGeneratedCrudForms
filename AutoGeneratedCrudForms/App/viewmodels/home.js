define(["viewmodels/exampleForm"], function (form) {
    var ctor = function () {
        this.canEdit = ko.observable(false);

        this.explicitFieldConfigsWithInvidualCanEdit = new form({
            text: {
                label: "My text label"
            },
            date: true,
            number: true,
            bool: true,
            textEdit: {
                canEdit: this.canEdit
            },
            numberEdit: {
                canEdit: this.canEdit
            },
            boolEdit: {
                canEdit: this.canEdit
            }
        });
        
        this.explicitFieldConfigsWithGlobalCanEdit = new form({
            canEdit: this.canEdit,
            fields: {
                text: true,
                date: true,
                number: true,
                bool: true,
                textEdit: true,
                numberEdit: true,
                boolEdit: true
            }
        });

        this.autoGeneratedOptions = new form();
        
        this.autoGeneratedOptionsWithCanEdit = new form({
            canEdit: this.canEdit
        });
        
        this.partiallyAutoGeneratedOptions = new form({
            autoGenerate: true,
            canEdit: this.canEdit,
            fields: {
                text: {
                    label: "Label overriden"
                }
            }
        });

        this.customDataTypes = new form({
            canEdit: this.canEdit,
            fields: {
                selectedFoo: {
                    combo: {
                        dataSource: this.getFoos
                    }
                }
            }
        },
        {
            selectedFoo: {
                id: 1,
                name: "Selected Foo"
            } 
            
        });

    };

    ctor.prototype = {
        getFoos: function (options) {
            if (options.page == 0) {
                options.total = Math.floor((Math.random() * 200) + 1);
            }

            var data = [];
            for (var i = 0; i < Math.min(options.pageSize, options.total) ; i++) {
                var index = (i + (options.page * options.pageSize));
                if (index == options.total) { break; }
                data.push({ name: options.text + " " + index });
            }

            //Simulate async
            var delay = Math.floor((Math.random() * 100) + 10);;
            setTimeout(function () {
                options.callback({ data: data, total: options.total });
            }, delay);
        }
    };
    
    return ctor;
});